// Karel.h


#pragma once

// variable names are just place holders for now, we can change them later -josh 2/17

class Karel
{

private:
	int x;
	int y; // position variables
	int d; //direction variable
	int b; //#of beepers variable

public:
	Karel(); //defualt
	Karel(int x, int y, int d, int b); 
	int karel_pos(int x, int y, int d); //shows position in the maze
	int karel_beeper(int b); //shows # of beepers
	int get_xy(int x, int y); //gets x and y 
	int get_d(int d); // gets direction
	int get_b(int b); // gets number of beepers 

	~Karel();


};

//World.h


#pragma once


class World
{

private:
	int ave; // verticals
	int str; // horizontals
	int b; // beepers
	bool w; // wall variable   should be a bool type 



public:
	World(); //default
	World(int ave, int str); //builds the world
	int set_b(int ave, int str, int b); //sets a beeper  setting one at a time at first, can change that later -josh 2/17
	int set_w(int ave, int str, bool w); // sets a wall

	~World();

};

//Karel.cpp




#include "Karel.h"
#include <iostream>





Karel::Karel()
{
	x = 0;
	y = 0;
	d = 0;
	b = 0;

}

Karel::Karel(int x, int y, int d, int b)
{

}

int Karel::karel_pos(int x, int y, int d)
{

}

int Karel::karel_beeper(int b)
{

}

int Karel::get_xy(int x, int y)
{

}

int Karel::get_d(int d)
{

}

int Karel::get_b(int b)
{

}

Karel::~Karel()
{
}


//World.cpp


#include "World.h"
#include <iostream>
#include <vector>

World::World()
{
	ave = 0;
	str = 0;
	b = 0;
	w = 0;
}

World::World(int ave, int str) // takes the variables from ave and str and makes a 2-d arry 
{
	std::vector<int> world_size[ave][str]; // something like this
}

int World::set_b(int ave, int str, int b)
{

}

int World::set_w(int ave, int str, bool w) //this should go through every block in the arry and decied if its a wall
{

}

World::~World()
{

}

// input function.cpp

#include <fstream>
#include <iostream>
#include <cstdlib>
#include <string>

std::ifstream input_file;  // place holder names

// no namespace for flexablity

void get_input() // gets the input for the program
{
	
	char ans;
	


    std::cout<<" input from file?"; // this can be removed if need be
	std::cin>>ans;
    if ( ans == 'y' )
	 {
		std:: string inputf;

		std::cout<<"What is the name of the input file? (add .txt)\n";
		std::cin>>inputf;
		input_file.open(inputf);
		if (input_file.fail())
		{
			std::cout<<"open fail.";
			std::cin>>ans;
			exit(1);
		}
		for(int i = 1; i <= 2; i++)
		{
		   if (i == 1)
		   {
			  //input karel data
		   }
		   else
		   {
			   //input the world data here
		   }
		}
		// have to remember to close the inpute file at some point in the program
	}

	

}

// Output function.cpp

#include <iostream>
#include <cstdlib>
#include <string>
#include <fstream>

std::ofstream output_file; // place holder names

// no namespace for flexablity

void output() // gets the output for the program
{
	
	char ans;

    std::cout<<"Would you like that to be saved to a file? (y for yes)"; //this can be removed or changed if need be
	std::cin>>ans;
	if (ans == 'y' || ans == 'Y') //saves the data to a file
	{
		std::string outputf;


		std::cout<<"Please specify the file to save it to(up to 16 charecters): ";
		std::cin>>outputf;
		output_file.open(outputf, std::ios::app); //appends file doesn't delete
		for(int i = 1;i <= 2; i++) //change to make it more flexible
		{
		   if (i == 1)
		   {
			  // output_file<<Karel(x,y,d,b); //that will complain until we build the rest of the program
		   }
		   else
		   {
			   //output the world data here
		   }
		}

		output_file.close();
		
		ans = 'q';
	}
}